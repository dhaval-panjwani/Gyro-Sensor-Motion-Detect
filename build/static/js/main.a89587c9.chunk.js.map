{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","MotionGame.js","index.js"],"names":["module","exports","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","MotionGame","addEventListener","event","c","document","getElementById","ctx","getContext","clearRect","width","height","fillStyle","font","alpha","fillText","beginPath","moveTo","lineTo","arc","Math","PI","fill","round","beta","fillRect","gamma","id","style","border","class","React","Component","routing","path","exact","component","ReactDOM","render","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,iMCyB5BC,ICbTC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oCCWlDC,G,wLAtGPxB,OAAOyB,iBAAiB,qBAoDxB,SAAmCC,GAC/B,IAAIC,EAAIC,SAASC,eAAe,YAC5BC,EAAMH,EAAEI,WAAW,MAEvBD,EAAIE,UAAU,EAAG,EAAGL,EAAEM,MAAON,EAAEO,QAC/BJ,EAAIK,UAAY,UAChBL,EAAIM,KAAO,eACX,IAAIC,EAAQX,EAAMW,MAClBP,EAAIQ,SAAS,UAAYD,EAAO,GAAI,IACpCP,EAAIS,YACJT,EAAIU,OAAO,IAAK,IAChBV,EAAIW,OAAO,IAAK,IAChBX,EAAIY,IAAI,IAAK,GAAI,GAAI,EAAGhB,EAAMW,MAAQM,KAAKC,GAAK,KAChDd,EAAIe,OAEJf,EAAIK,UAAY,UAChBL,EAAIQ,SAAS,SAAWK,KAAKG,MAAMpB,EAAMqB,MAAO,GAAI,KACpDjB,EAAIS,YACJT,EAAIkB,SAAS,IAAK,IAAKtB,EAAMqB,KAAM,IAEnCjB,EAAIK,UAAY,UAChBL,EAAIQ,SAAS,UAAYK,KAAKG,MAAMpB,EAAMuB,OAAQ,GAAI,KACtDnB,EAAIS,YACJT,EAAIkB,SAAS,GAAI,IAAK,IAAKtB,EAAMuB,Y,+BAiBrC,OACI,6BAAK,4BAAQC,GAAG,WAAWjB,MAAM,MAAMC,OAAO,MAAMiB,MANpC,CAChBC,OAAQ,uBAOJ,uBAAGC,MAAM,QAAT,0C,GAlGSC,IAAMC,Y,eCMzBC,EACJ,kBAAC,IAAD,KACE,6BAEE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnC,MAIvCoC,IAASC,OAAOL,EAAS5B,SAASC,eAAe,SFM1C,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuD,IAAIC,GAAwB/D,OAAOC,SAAS+D,MACpDC,SAAWjE,OAAOC,SAASgE,OAIvC,OAGFjE,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAM0D,GAAN,sBAEPjE,IAgEV,SAAiCO,EAAOC,GAEtC4D,MAAM7D,EAAO,CACX8D,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAA0D,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjE,UAAUC,cAAciE,MAAM/D,MAAK,SAAAC,GACjCA,EAAa+D,aAAahE,MAAK,WAC7BV,OAAOC,SAAS0E,eAKpBvE,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyD,CAAwBvE,EAAOC,GAI/BC,UAAUC,cAAciE,MAAM/D,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OE7B/BE,K","file":"static/js/main.a89587c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './MotionGame.css';\nclass MotionGame extends React.Component {\n\n    componentDidMount() {\n        window.addEventListener('deviceorientation', deviceOrientationListener);\n        // var ball = document.querySelector('.ball');\n        // var garden = document.querySelector('.garden');\n        // var output = document.querySelector('.output');\n\n        // // var ball = document.getElementById('ball');\n        // // var garden = document.getElementById('garden');\n        // // var output = document.getElementById('output');\n\n        // // var ball = document.querySelector('ball');\n        // // var garden = document.querySelector('garden');\n        // // var output = document.querySelector('output');\n\n        // var maxX = garden.clientWidth - ball.clientWidth;\n        // var maxY = garden.clientHeight - ball.clientHeight;\n\n        // function handleOrientation(event) {\n\n\n        //     var x = event.alpha;  // In degree in the range [-180,180]\n        //     var y = event.beta; // In degree in the range [-90,90]\n\n        //     output.innerHTML = \"beta : \" + x + \"\\n\";\n        //     output.innerHTML += \"gamma: \" + y + \"\\n\";\n        //     output.innerHTML += \"alpha: \" + event.gamma + \"\\n\";\n        //     output.innerHTML += \"absolute: \" + event.absolute + \"\\n\";\n\n        //     // var x = event.beta;  // In degree in the range [-180,180]\n        //     // var y = event.gamma; // In degree in the range [-90,90]\n\n        //     // output.innerHTML = \"beta : \" + x + \"\\n\";\n        //     // output.innerHTML += \"gamma: \" + y + \"\\n\";\n        //     // output.innerHTML += \"alpha: \" + event.alpha + \"\\n\";\n        //     // output.innerHTML += \"absolute: \" + event.absolute + \"\\n\";\n\n\n        //     // Because we don't want to have the device upside down\n        //     // We constrain the x value to the range [-90,90]\n        //     if (x > 90) { x = 90 };\n        //     if (x < -90) { x = -90 };\n\n        //     // To make computation easier we shift the range of \n        //     // x and y to [0,180]\n        //     // x += 90;\n        //     // y += 90;\n\n        //     // 10 is half the size of the ball\n        //     // It center the positioning point to the center of the ball\n        //     ball.style.top = (maxY * y / 180 - 10) + \"px\";\n        //     ball.style.left = (maxX * x / 180 - 10) + \"px\";\n        // }\n\n        function deviceOrientationListener(event) {\n            var c = document.getElementById(\"myCanvas\");\n            var ctx = c.getContext(\"2d\");\n\n            ctx.clearRect(0, 0, c.width, c.height);\n            ctx.fillStyle = \"#FF7777\";\n            ctx.font = \"14px Verdana\";\n            var alpha = event.alpha;\n            ctx.fillText(\"Alpha: \" + alpha, 10, 20);\n            ctx.beginPath();\n            ctx.moveTo(180, 75);\n            ctx.lineTo(210, 75);\n            ctx.arc(180, 75, 60, 0, event.alpha * Math.PI / 180);\n            ctx.fill();\n\n            ctx.fillStyle = \"#FF6600\";\n            ctx.fillText(\"Beta: \" + Math.round(event.beta), 10, 140);\n            ctx.beginPath();\n            ctx.fillRect(180, 150, event.beta, 90);\n\n            ctx.fillStyle = \"#FF0000\";\n            ctx.fillText(\"Gamma: \" + Math.round(event.gamma), 10, 270);\n            ctx.beginPath();\n            ctx.fillRect(90, 340, 180, event.gamma);\n        }\n\n\n\n    }\n\n\n\n\n    render() {\n\n        const canvasStyle = {\n            border: \"1px solid #d3d3d3\",\n\n        }\n\n        return (\n            <div><canvas id=\"myCanvas\" width=\"360\" height=\"450\" style={canvasStyle}>\n            </canvas>\n                <p class=\"love\">Made with Love\n                    by Dhaval Panjwani</p>\n            </div>\n\n        )\n    }\n}\nexport default MotionGame","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MotionGame from './MotionGame';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\n\nconst routing = (\n  <Router>\n    <div>\n      {/* <Route path=\"/\" exact component={App} /> */}\n      <Route path=\"/\" exact component={MotionGame} />\n    </div>\n  </Router>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}